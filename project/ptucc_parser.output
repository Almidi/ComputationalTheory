Nonterminals useless in grammar

   shortcut_data_type


Terminals unused in grammar

   CAST
   BOOL
   KW_AND
   KW_DIV
   KW_FUNCTION
   KW_MOD
   KW_PROCEDURE
   KW_RESULT
   KW_DO
   KW_GOTO
   KW_NOT
   KW_RERURN
   KW_ELSE
   KW_IF
   KW_THEN
   KW_FOR
   KW_OR
   KW_REPEAT
   KW_UNTIL
   KW_WHILE
   KW_TO
   KW_DOWNTO
   SY_DASH
   SY_SLASH
   SY_EQUALS
   SY_LESS
   SY_GREATER
   SY_LESS_EQUALS
   SY_GREATER_EQUALS
   SY_LESS_BIGGER
   SY_AND
   SY_OR
   SY_NOT
   SY_ASSIGN
   SY_PLUS
   SY_STAR


State 6 conflicts: 1 shift/reduce
State 11 conflicts: 1 shift/reduce
State 35 conflicts: 1 shift/reduce
State 45 conflicts: 1 shift/reduce
State 52 conflicts: 1 shift/reduce
State 54 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: program_decl var_decl body SY_PERIOD

    2 program_decl: KW_PROGRAM IDENT SY_SEMICOLON

    3 body: KW_BEGIN statements KW_END

    4 statements: %empty
    5           | statement_list

    6 statement_list: statement
    7               | statement_list SY_SEMICOLON statement

    8 statement: proc_call

    9 proc_call: IDENT SY_LEFT_BRACKET arguments SY_RIGHT_BRACKET

   10 arguments: %empty
   11          | arglist

   12 arglist: expression
   13        | arglist SY_COMMA expression

   14 expression: POSINT
   15           | REAL
   16           | STRING

   17 simple_data_type: KW_INTEGER
   18                 | KW_CHAR
   19                 | KW_BOOLEAN
   20                 | KW_REAL

   21 advanced_data_type: simple_data_type

   22 matrix_n: %empty
   23         | matrix_n SY_LEFT_SQR_BRACKET POSINT SY_RIGHT_SQR_BRACKET

   24 var_decl: %empty
   25         | KW_VAR var_decl_list var_decl

   26 var_decl_id: IDENT
   27            | var_decl_id SY_COMMA IDENT

   28 var_decl_list: %empty
   29              | var_decl_id SY_COLON advanced_data_type SY_SEMICOLON var_decl var_decl_list
   30              | var_decl_id SY_COLON KW_ARRAY matrix_n KW_OF simple_data_type SY_SEMICOLON var_decl var_decl_list


Terminals, with rules where they appear

$end (0) 0
error (256)
IDENT (258) 2 9 26 27
POSINT (259) 14 23
REAL (260) 15
STRING (261) 16
CAST (262)
BOOL (263)
KW_PROGRAM (264) 2
KW_BEGIN (265) 3
KW_END (266) 3
KW_AND (267)
KW_DIV (268)
KW_FUNCTION (269)
KW_MOD (270)
KW_PROCEDURE (271)
KW_RESULT (272)
KW_ARRAY (273) 30
KW_DO (274)
KW_GOTO (275)
KW_NOT (276)
KW_RERURN (277)
KW_BOOLEAN (278) 19
KW_ELSE (279)
KW_IF (280)
KW_OF (281) 30
KW_REAL (282) 20
KW_THEN (283)
KW_CHAR (284) 18
KW_FOR (285)
KW_INTEGER (286) 17
KW_OR (287)
KW_REPEAT (288)
KW_UNTIL (289)
KW_VAR (290) 25
KW_WHILE (291)
KW_TO (292)
KW_DOWNTO (293)
SY_DASH (294)
SY_SLASH (295)
SY_EQUALS (296)
SY_LESS (297)
SY_GREATER (298)
SY_LESS_EQUALS (299)
SY_GREATER_EQUALS (300)
SY_LESS_BIGGER (301)
SY_AND (302)
SY_OR (303)
SY_NOT (304)
SY_ASSIGN (305)
SY_COMMA (306) 13 27
SY_LEFT_SQR_BRACKET (307) 23
SY_RIGHT_SQR_BRACKET (308) 23
SY_COLON (309) 29 30
SY_PLUS (310)
SY_STAR (311)
SY_SEMICOLON (312) 2 7 29 30
SY_PERIOD (313) 1
SY_LEFT_BRACKET (314) 9
SY_RIGHT_BRACKET (315) 9


Nonterminals, with rules where they appear

$accept (61)
    on left: 0
program (62)
    on left: 1, on right: 0
program_decl (63)
    on left: 2, on right: 1
body (64)
    on left: 3, on right: 1
statements (65)
    on left: 4 5, on right: 3
statement_list (66)
    on left: 6 7, on right: 5 7
statement (67)
    on left: 8, on right: 6 7
proc_call (68)
    on left: 9, on right: 8
arguments (69)
    on left: 10 11, on right: 9
arglist (70)
    on left: 12 13, on right: 11 13
expression (71)
    on left: 14 15 16, on right: 12 13
simple_data_type (72)
    on left: 17 18 19 20, on right: 21 30
advanced_data_type (73)
    on left: 21, on right: 29
matrix_n (74)
    on left: 22 23, on right: 23 30
var_decl (75)
    on left: 24 25, on right: 1 25 29 30
var_decl_id (76)
    on left: 26 27, on right: 27 29 30
var_decl_list (77)
    on left: 28 29 30, on right: 25 29 30


State 0

    0 $accept: . program $end
    1 program: . program_decl var_decl body SY_PERIOD
    2 program_decl: . KW_PROGRAM IDENT SY_SEMICOLON

    KW_PROGRAM  shift, and go to state 1

    program       go to state 2
    program_decl  go to state 3


State 1

    2 program_decl: KW_PROGRAM . IDENT SY_SEMICOLON

    IDENT  shift, and go to state 4


State 2

    0 $accept: program . $end

    $end  shift, and go to state 5


State 3

    1 program: program_decl . var_decl body SY_PERIOD
   24 var_decl: . %empty  [KW_BEGIN]
   25         | . KW_VAR var_decl_list var_decl

    KW_VAR  shift, and go to state 6

    $default  reduce using rule 24 (var_decl)

    var_decl  go to state 7


State 4

    2 program_decl: KW_PROGRAM IDENT . SY_SEMICOLON

    SY_SEMICOLON  shift, and go to state 8


State 5

    0 $accept: program $end .

    $default  accept


State 6

   25 var_decl: KW_VAR . var_decl_list var_decl
   26 var_decl_id: . IDENT
   27            | . var_decl_id SY_COMMA IDENT
   28 var_decl_list: . %empty  [IDENT, KW_BEGIN, KW_VAR]
   29              | . var_decl_id SY_COLON advanced_data_type SY_SEMICOLON var_decl var_decl_list
   30              | . var_decl_id SY_COLON KW_ARRAY matrix_n KW_OF simple_data_type SY_SEMICOLON var_decl var_decl_list

    IDENT  shift, and go to state 9

    IDENT     [reduce using rule 28 (var_decl_list)]
    $default  reduce using rule 28 (var_decl_list)

    var_decl_id    go to state 10
    var_decl_list  go to state 11


State 7

    1 program: program_decl var_decl . body SY_PERIOD
    3 body: . KW_BEGIN statements KW_END

    KW_BEGIN  shift, and go to state 12

    body  go to state 13


State 8

    2 program_decl: KW_PROGRAM IDENT SY_SEMICOLON .

    $default  reduce using rule 2 (program_decl)


State 9

   26 var_decl_id: IDENT .

    $default  reduce using rule 26 (var_decl_id)


State 10

   27 var_decl_id: var_decl_id . SY_COMMA IDENT
   29 var_decl_list: var_decl_id . SY_COLON advanced_data_type SY_SEMICOLON var_decl var_decl_list
   30              | var_decl_id . SY_COLON KW_ARRAY matrix_n KW_OF simple_data_type SY_SEMICOLON var_decl var_decl_list

    SY_COMMA  shift, and go to state 14
    SY_COLON  shift, and go to state 15


State 11

   24 var_decl: . %empty  [IDENT, KW_BEGIN, KW_VAR]
   25         | . KW_VAR var_decl_list var_decl
   25         | KW_VAR var_decl_list . var_decl

    KW_VAR  shift, and go to state 6

    KW_VAR    [reduce using rule 24 (var_decl)]
    $default  reduce using rule 24 (var_decl)

    var_decl  go to state 16


State 12

    3 body: KW_BEGIN . statements KW_END
    4 statements: . %empty  [KW_END]
    5           | . statement_list
    6 statement_list: . statement
    7               | . statement_list SY_SEMICOLON statement
    8 statement: . proc_call
    9 proc_call: . IDENT SY_LEFT_BRACKET arguments SY_RIGHT_BRACKET

    IDENT  shift, and go to state 17

    $default  reduce using rule 4 (statements)

    statements      go to state 18
    statement_list  go to state 19
    statement       go to state 20
    proc_call       go to state 21


State 13

    1 program: program_decl var_decl body . SY_PERIOD

    SY_PERIOD  shift, and go to state 22


State 14

   27 var_decl_id: var_decl_id SY_COMMA . IDENT

    IDENT  shift, and go to state 23


State 15

   17 simple_data_type: . KW_INTEGER
   18                 | . KW_CHAR
   19                 | . KW_BOOLEAN
   20                 | . KW_REAL
   21 advanced_data_type: . simple_data_type
   29 var_decl_list: var_decl_id SY_COLON . advanced_data_type SY_SEMICOLON var_decl var_decl_list
   30              | var_decl_id SY_COLON . KW_ARRAY matrix_n KW_OF simple_data_type SY_SEMICOLON var_decl var_decl_list

    KW_ARRAY    shift, and go to state 24
    KW_BOOLEAN  shift, and go to state 25
    KW_REAL     shift, and go to state 26
    KW_CHAR     shift, and go to state 27
    KW_INTEGER  shift, and go to state 28

    simple_data_type    go to state 29
    advanced_data_type  go to state 30


State 16

   25 var_decl: KW_VAR var_decl_list var_decl .

    $default  reduce using rule 25 (var_decl)


State 17

    9 proc_call: IDENT . SY_LEFT_BRACKET arguments SY_RIGHT_BRACKET

    SY_LEFT_BRACKET  shift, and go to state 31


State 18

    3 body: KW_BEGIN statements . KW_END

    KW_END  shift, and go to state 32


State 19

    5 statements: statement_list .  [KW_END]
    7 statement_list: statement_list . SY_SEMICOLON statement

    SY_SEMICOLON  shift, and go to state 33

    $default  reduce using rule 5 (statements)


State 20

    6 statement_list: statement .

    $default  reduce using rule 6 (statement_list)


State 21

    8 statement: proc_call .

    $default  reduce using rule 8 (statement)


State 22

    1 program: program_decl var_decl body SY_PERIOD .

    $default  reduce using rule 1 (program)


State 23

   27 var_decl_id: var_decl_id SY_COMMA IDENT .

    $default  reduce using rule 27 (var_decl_id)


State 24

   22 matrix_n: . %empty
   23         | . matrix_n SY_LEFT_SQR_BRACKET POSINT SY_RIGHT_SQR_BRACKET
   30 var_decl_list: var_decl_id SY_COLON KW_ARRAY . matrix_n KW_OF simple_data_type SY_SEMICOLON var_decl var_decl_list

    $default  reduce using rule 22 (matrix_n)

    matrix_n  go to state 34


State 25

   19 simple_data_type: KW_BOOLEAN .

    $default  reduce using rule 19 (simple_data_type)


State 26

   20 simple_data_type: KW_REAL .

    $default  reduce using rule 20 (simple_data_type)


State 27

   18 simple_data_type: KW_CHAR .

    $default  reduce using rule 18 (simple_data_type)


State 28

   17 simple_data_type: KW_INTEGER .

    $default  reduce using rule 17 (simple_data_type)


State 29

   21 advanced_data_type: simple_data_type .

    $default  reduce using rule 21 (advanced_data_type)


State 30

   29 var_decl_list: var_decl_id SY_COLON advanced_data_type . SY_SEMICOLON var_decl var_decl_list

    SY_SEMICOLON  shift, and go to state 35


State 31

    9 proc_call: IDENT SY_LEFT_BRACKET . arguments SY_RIGHT_BRACKET
   10 arguments: . %empty  [SY_RIGHT_BRACKET]
   11          | . arglist
   12 arglist: . expression
   13        | . arglist SY_COMMA expression
   14 expression: . POSINT
   15           | . REAL
   16           | . STRING

    POSINT  shift, and go to state 36
    REAL    shift, and go to state 37
    STRING  shift, and go to state 38

    $default  reduce using rule 10 (arguments)

    arguments   go to state 39
    arglist     go to state 40
    expression  go to state 41


State 32

    3 body: KW_BEGIN statements KW_END .

    $default  reduce using rule 3 (body)


State 33

    7 statement_list: statement_list SY_SEMICOLON . statement
    8 statement: . proc_call
    9 proc_call: . IDENT SY_LEFT_BRACKET arguments SY_RIGHT_BRACKET

    IDENT  shift, and go to state 17

    statement  go to state 42
    proc_call  go to state 21


State 34

   23 matrix_n: matrix_n . SY_LEFT_SQR_BRACKET POSINT SY_RIGHT_SQR_BRACKET
   30 var_decl_list: var_decl_id SY_COLON KW_ARRAY matrix_n . KW_OF simple_data_type SY_SEMICOLON var_decl var_decl_list

    KW_OF                shift, and go to state 43
    SY_LEFT_SQR_BRACKET  shift, and go to state 44


State 35

   24 var_decl: . %empty  [IDENT, KW_BEGIN, KW_VAR]
   25         | . KW_VAR var_decl_list var_decl
   29 var_decl_list: var_decl_id SY_COLON advanced_data_type SY_SEMICOLON . var_decl var_decl_list

    KW_VAR  shift, and go to state 6

    KW_VAR    [reduce using rule 24 (var_decl)]
    $default  reduce using rule 24 (var_decl)

    var_decl  go to state 45


State 36

   14 expression: POSINT .

    $default  reduce using rule 14 (expression)


State 37

   15 expression: REAL .

    $default  reduce using rule 15 (expression)


State 38

   16 expression: STRING .

    $default  reduce using rule 16 (expression)


State 39

    9 proc_call: IDENT SY_LEFT_BRACKET arguments . SY_RIGHT_BRACKET

    SY_RIGHT_BRACKET  shift, and go to state 46


State 40

   11 arguments: arglist .  [SY_RIGHT_BRACKET]
   13 arglist: arglist . SY_COMMA expression

    SY_COMMA  shift, and go to state 47

    $default  reduce using rule 11 (arguments)


State 41

   12 arglist: expression .

    $default  reduce using rule 12 (arglist)


State 42

    7 statement_list: statement_list SY_SEMICOLON statement .

    $default  reduce using rule 7 (statement_list)


State 43

   17 simple_data_type: . KW_INTEGER
   18                 | . KW_CHAR
   19                 | . KW_BOOLEAN
   20                 | . KW_REAL
   30 var_decl_list: var_decl_id SY_COLON KW_ARRAY matrix_n KW_OF . simple_data_type SY_SEMICOLON var_decl var_decl_list

    KW_BOOLEAN  shift, and go to state 25
    KW_REAL     shift, and go to state 26
    KW_CHAR     shift, and go to state 27
    KW_INTEGER  shift, and go to state 28

    simple_data_type  go to state 48


State 44

   23 matrix_n: matrix_n SY_LEFT_SQR_BRACKET . POSINT SY_RIGHT_SQR_BRACKET

    POSINT  shift, and go to state 49


State 45

   26 var_decl_id: . IDENT
   27            | . var_decl_id SY_COMMA IDENT
   28 var_decl_list: . %empty  [IDENT, KW_BEGIN, KW_VAR]
   29              | . var_decl_id SY_COLON advanced_data_type SY_SEMICOLON var_decl var_decl_list
   29              | var_decl_id SY_COLON advanced_data_type SY_SEMICOLON var_decl . var_decl_list
   30              | . var_decl_id SY_COLON KW_ARRAY matrix_n KW_OF simple_data_type SY_SEMICOLON var_decl var_decl_list

    IDENT  shift, and go to state 9

    IDENT     [reduce using rule 28 (var_decl_list)]
    $default  reduce using rule 28 (var_decl_list)

    var_decl_id    go to state 10
    var_decl_list  go to state 50


State 46

    9 proc_call: IDENT SY_LEFT_BRACKET arguments SY_RIGHT_BRACKET .

    $default  reduce using rule 9 (proc_call)


State 47

   13 arglist: arglist SY_COMMA . expression
   14 expression: . POSINT
   15           | . REAL
   16           | . STRING

    POSINT  shift, and go to state 36
    REAL    shift, and go to state 37
    STRING  shift, and go to state 38

    expression  go to state 51


State 48

   30 var_decl_list: var_decl_id SY_COLON KW_ARRAY matrix_n KW_OF simple_data_type . SY_SEMICOLON var_decl var_decl_list

    SY_SEMICOLON  shift, and go to state 52


State 49

   23 matrix_n: matrix_n SY_LEFT_SQR_BRACKET POSINT . SY_RIGHT_SQR_BRACKET

    SY_RIGHT_SQR_BRACKET  shift, and go to state 53


State 50

   29 var_decl_list: var_decl_id SY_COLON advanced_data_type SY_SEMICOLON var_decl var_decl_list .

    $default  reduce using rule 29 (var_decl_list)


State 51

   13 arglist: arglist SY_COMMA expression .

    $default  reduce using rule 13 (arglist)


State 52

   24 var_decl: . %empty  [IDENT, KW_BEGIN, KW_VAR]
   25         | . KW_VAR var_decl_list var_decl
   30 var_decl_list: var_decl_id SY_COLON KW_ARRAY matrix_n KW_OF simple_data_type SY_SEMICOLON . var_decl var_decl_list

    KW_VAR  shift, and go to state 6

    KW_VAR    [reduce using rule 24 (var_decl)]
    $default  reduce using rule 24 (var_decl)

    var_decl  go to state 54


State 53

   23 matrix_n: matrix_n SY_LEFT_SQR_BRACKET POSINT SY_RIGHT_SQR_BRACKET .

    $default  reduce using rule 23 (matrix_n)


State 54

   26 var_decl_id: . IDENT
   27            | . var_decl_id SY_COMMA IDENT
   28 var_decl_list: . %empty  [IDENT, KW_BEGIN, KW_VAR]
   29              | . var_decl_id SY_COLON advanced_data_type SY_SEMICOLON var_decl var_decl_list
   30              | . var_decl_id SY_COLON KW_ARRAY matrix_n KW_OF simple_data_type SY_SEMICOLON var_decl var_decl_list
   30              | var_decl_id SY_COLON KW_ARRAY matrix_n KW_OF simple_data_type SY_SEMICOLON var_decl . var_decl_list

    IDENT  shift, and go to state 9

    IDENT     [reduce using rule 28 (var_decl_list)]
    $default  reduce using rule 28 (var_decl_list)

    var_decl_id    go to state 10
    var_decl_list  go to state 55


State 55

   30 var_decl_list: var_decl_id SY_COLON KW_ARRAY matrix_n KW_OF simple_data_type SY_SEMICOLON var_decl var_decl_list .

    $default  reduce using rule 30 (var_decl_list)
